parameters:
- name: ProjectName
  displayName: Project Name
  type: string
  default: Test
  values:
  - flanksource
  - OldMutual
  - atlassian

- name: Repository
  displayName: repo Name
  type: string
  default: TestRepo
  values:
  - canary-checker
  - infrastructure
  - github-for-jira

- name: branchRef
  displayName: Branch Name
  type: string
  default: Test
  values:
  - main
  - dev

- name: Endpoint
  displayName: Endpoint
  type: string
  default: Test
  values:
  - TestEndpoint
  - edeediong

- name: RepoType
  displayName: Repo Type
  type: string
  default: github
  values:
  - github
  - git
  - bitbucket

resources:
  repositories:
  - repository: ${{ parameters.Repository }}
    type: ${{ parameters.RepoType }}
    endpoint: ${{ parameters.Endpoint }}
    name:   ${{ parameters.ProjectName }}/${{ parameters.Repository }}

pool:
  vmImage: 'Ubuntu-latest'
 
steps:
  - checkout: github-for-jira
        
  # - task: XplatGenerateReleaseNotes@3
  #   inputs:
  #     outputfile: '$(Build.ArtifactStagingDirectory)/release-notes.md'
  #     templateLocation: 'InLine'
  #     inlinetemplate: |
  #       # Notes for build 
  #       **Build Number**: {{buildDetails.id}}
  #       **Build Trigger PR Number**: {{lookup buildDetails.triggerInfo 'pr.number'}} 

  #       commits: {{builds.commits}}

  #       # Associated Pull Requests ({{pullRequests.length}})
  #       {{#forEach pullRequests}}
  #       {{#if isFirst}}### Associated Pull Requests (only shown if  PR) {{/if}}
  #       *  **PR {{this.id}}**  {{this.title}}
  #       {{/forEach}}
        
  #       # Builds with associated WI/CS ({{builds.length}})
  #       {{#forEach builds}}
  #       {{#if isFirst}}## Builds {{/if}}
  #       ##  Build {{this.build.buildNumber}}
  #       {{#forEach this.commits}}
  #       {{#if isFirst}}### Commits {{/if}}
  #       - CS {{this.id}}
  #       {{/forEach}}
  #       {{#forEach this.workitems}}
  #       {{#if isFirst}}### Workitems {{/if}}
  #       - WI {{this.id}}
  #       {{/forEach}} 
  #       {{/forEach}}
        
  #       # Global list of WI ({{workItems.length}})
  #       {{#forEach workItems}}
  #       {{#if isFirst}}## Associated Work Items (only shown if  WI) {{/if}}
  #       *  **{{this.id}}**  {{lookup this.fields 'System.Title'}}
  #         - **WIT** {{lookup this.fields 'System.WorkItemType'}} 
  #         - **Tags** {{lookup this.fields 'System.Tags'}}
  #       {{/forEach}}
        
  #       {{#forEach commits}}
  #       {{#if isFirst}}### Associated commits{{/if}}
  #       * ** ID{{this.id}}** 
  #         -  **Message:** {{this.message}}
  #         -  **Commited by:** {{this.author.displayName}} 
  #         -  **FileCount:** {{this.changes.length}} 
  #       {{#forEach this.changes}}
  #             -  **File path (TFVC or TfsGit):** {{this.item.path}}  
  #             -  **File filename (GitHub):** {{this.filename}}  
  #       {{/forEach}}
  #       {{/forEach}}
  #     dumpPayloadToConsole: false
  #     dumpPayloadToFile: false
  #     replaceFile: True
  #     getParentsAndChildren: False
  #     getAllParents: False
  #     getIndirectPullRequests: False
  #     stopOnError: False
  #     considerPartiallySuccessfulReleases: False
  #     checkForManuallyLinkedWI: False
  #     wiqlFromTarget: 'WorkItems'

  - task: Bash@3
    displayName: Git Commit Messages
    inputs:
      targetType: 'inline' 
      script: |
        git log --pretty="* **%s** (%an)" -i -E --grep="feat:|fix:" > $(Build.ArtifactStagingDirectory)/release-notes.md
  - task: Bash@3
    displayName: Extract Jira IDs
    inputs:
      targetType: 'inline' 
      script: |
        echo ${{ variables.start_time }} >> $(Build.ArtifactStagingDirectory)/release-notes.md
        cd '$(System.DefaultWorkingDirectory)' && git log > log.txt
        Encoded="ID%20in%20"
        JiraID=$(cat log.txt | grep -Po '\w+-\d+' | sort | uniq | sed -z 's/\n/,/g;s/,$/\n/')
        URL="https://oldmutual.atlassian.net/issues/?jql=${Encoded}(${JiraID})"
        echo "- **Jira URL:** [Click Here to Access Jira URL]($URL)" >> $(Build.ArtifactStagingDirectory)/release-notes.md
        cat $(Build.ArtifactStagingDirectory)/release-notes.md

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'